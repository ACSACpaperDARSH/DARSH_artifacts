# auto-generated by CC_DecisionNode_OVS service
# Short python to implement Trigger.
# The following three items are important:
# 1. You must write the process_data(self) function
# 2. Read the input (from the Monitor) by calling self.read_input_line()
# 3. Call the self.active_conn method with the cc node number as a parameter.
# The following is a sample that reads time information from the Monitor and 
# will swap between nodes every 15 seconds

import time
#Required import
from Trigger.trigger import Trigger

#Required class name that inherits Trigger
class MyTrigger(Trigger):  
    
    #Required function
    def process_data(self):
        #get the cc_node numbers
        nodes = self.get_cc_node_numbers()
        self.set_active_conn("eth0", disable_others=True)
        self.set_active_conn("eth2", disable_others=False)
        #forever loop to process data
        while True:
            time.sleep(2)
####Modify to process Monitor's data and Trigger a switch####
            # read a line of input (from Monitor's stdout)
            # data = self.read_input_line()
            with open('trigger.txt', 'r') as f:
                data = f.readlines()[-1]
            print("READ: " + str(data))

            if "legit" in data:
                self.set_active_conn("eth0", disable_others=True)
                self.set_active_conn("eth1", disable_others=False)
            if "honey1" in data:
                self.set_active_conn("eth0", disable_others=True)
                self.set_active_conn("eth3", disable_others=False)
            if "honey2" in data:
                self.set_active_conn("eth0", disable_others=True)
                self.set_active_conn("eth2", disable_others=False)
####