node n3 {
    type router
    model router
    network-config {
	hostname R1
	!
	interface eth1
	 ip address 10.0.2.1/24
	 mac address 00:bb:00:cc:00:33
	!
	interface eth2
	 ip address 10.0.1.1/24
	 mac address 00:11:22:33:bb:aa
	!
	interface eth0
	 ip address 10.0.0.1/24
	!
    }
    canvas c1
    iconcoords {230.0 187.0}
    labelcoords {229.0 169.0}
    services {zebra CC_Node IPForward StaticRoute}
    interface-peer {eth2 n13}
    interface-peer {eth1 n4}
    interface-peer {eth0 n1}
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 10.0.0.1
	#/sbin/ip route add 10.9.8.0/24 via 10.0.2.1
	#/sbin/ip route add 10.9.8.0/24 via 10.0.1.1
	/sbin/ip route add 10.0.5.0/24 via 10.0.2.4
	/sbin/ip route add 10.0.6.0/24 via 10.0.1.2
	}
    }
}

node n6 {
    type router
    model router
    network-config {
	hostname R5
	!
	interface eth2
	 mac address 00:bb:00:cc:00:33
	 ip address 10.0.2.1/24
	!
	interface eth0
	 ip address 10.0.1.1/24
	 mac address 00:11:22:33:bb:aa
	!
	interface eth1
	 ip address 10.0.0.1/24
	!
    }
    canvas c1
    iconcoords {300.0 570.0}
    labelcoords {300.0 602.0}
    interface-peer {eth1 n7}
    services {zebra CC_Node IPForward StaticRoute}
    interface-peer {eth0 n13}
    interface-peer {eth2 n4}
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 10.0.1.1
	#/sbin/ip route add 10.9.8.0/24 via 10.0.0.1
	#/sbin/ip route add 10.9.8.0/24 via 10.0.2.1
	/sbin/ip route add 10.0.5.0/24 via 10.0.2.4
	/sbin/ip route add 10.0.6.0/24 via 10.0.1.2
	}
    }
}

node n7 {
    type router
    model host
    network-config {
	hostname honeyserver2
	!
	interface eth0
	 ip address 10.0.0.10/24
	 mac address 08:00:27:E1:11:CF
	!
    }
    canvas c1
    iconcoords {566.0 569.0}
    labelcoords {566.0 601.0}
    interface-peer {eth0 n6}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/var/log/nginx', '/var/www/html', )
	files=('auto.sh', )
	cmdup=('nginx', 'bash auto.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:auto.sh
	custom-command auto.sh
	config {
	c=1
	
	while [ $c -le 5 ]
	do
	
		sleep 10
		rsync -av mrx@10.0.5.10:/home/mrx/practical_honeypot_CDES/crawler/scripts/http:/10.0.0.10/ /var/www/html/
		sudo chown -R www-data:www-data /var/www/html/
		chmod -R 755 /var/www/html/
	done
	}
    }
    custom-config {
	custom-config-id service:SSH
	custom-command SSH
	config {
	dirs=('/etc/ssh', '/var/run/sshd', '/home/researchdev/.ssh', )
	files=('startsshd.sh', '/etc/ssh/sshd_config', 'ssh_host_rsa_key', 'id_rsa.pub', )
	cmdup=('cp ssh_host_rsa_key /etc/ssh/', 'cp id_rsa.pub /home/researchdev/.ssh/', 'bash startsshd.sh', )
	}
    }
    custom-config {
	custom-config-id service:SSH:id_rsa.pub
	custom-command id_rsa.pub
	config {
	ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQD2028JMayhmpgdAXG9/mJ1nLiOJcWmQazUFCpEz6QN8jIQoitK5MiOu3Svr1ccZo6tK8x8n9Y1C8O39/3qIlFv+eahwUS2CpVb04eLC4jpExxJBt7NXFgrqQZ7bIX8NDJwobN8uMEx1/6rkpVb0QY/eF1chzskArZff/RnuXM62mfeGnXZuvzFD0jMV7byVm8A+KekCC/Qh9lg69PRTl437OoyF5CjApx62SxYi8O3lm47d1u0XVr6ETizEPfcIGVPTp4F3DPFitC+CH9S0qV0N+5eJsw/IH3dspy2ZfponqjPlBpjXNRDzYooKSkRaAm0fDVUC6EjkxgPEIT4/SOdnYyPdWTDPnVREQUhKgrj3WeOst/hoEymH/wEPGI/PNFSVEb/OJapLWxZ9YFgbCAZ426vvgtjrNU5SAroLBlK0h81e5jcxCM5DZNjEOiQOjq8yPoi1KogL25aEcHJgq9oG0y8i/Cl6zUs2xLbiRyWWn5yBoMtVj0EcihkYWQ3cwE= mrx@mrx-VirtualBox
	}
    }
    custom-config {
	custom-config-id service:SSH:ssh_host_rsa_key
	custom-command ssh_host_rsa_key
	config {
	-----BEGIN OPENSSH PRIVATE KEY-----
	b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcn
	NhAAAAAwEAAQAAAYEAwMHiYTcIXDkIUKJ3L2aN7LMPRBLzKFLv6T0Bp5uu0yZHQ1OXKhuM
	c4yxXpDhjtu/GChKskPNF8x0hYgz5x4lAkk/iA0A+k30xABPPCq9PgslEuJdQfptzcnTcv
	DFcmhdoHApwC5IQKMWPBPyjdlJCTPktquVi9mAavqFqboyexTVkBNlnqDq7qIuhd/jtLOS
	1xJty1LsVKfH54hhPo6teEYM/93Q7TdgsIb6lwqwHYdotnrtTo7brlq3ttuOmBDZRKo2Z8
	Tw9vcRglnc/PtXptUrsBCXcZ4ou9YfrM25ZuDd97Y8soYeZrKO2vFNzq5X/aTF3Np8tB8o
	WQ1TxUX7KQ3xJcdifB96PHj2j4FIKstmuuzghu90yZPG4Z/FNcVfCQ24yGG9Ie2/FON9R0
	xORcUO0GDpXxnT0zn5G52F0P56k1Yn8UDCEp8rBE8LHtxwPxXNu//Qx/pbLpjieoxyDIde
	qE8fur0ZXsVJQ1KT72gJP7CqqI2lXnD+tEKj4+/vAAAFiBqjjAoao4wKAAAAB3NzaC1yc2
	EAAAGBAMDB4mE3CFw5CFCidy9mjeyzD0QS8yhS7+k9AaebrtMmR0NTlyobjHOMsV6Q4Y7b
	vxgoSrJDzRfMdIWIM+ceJQJJP4gNAPpN9MQATzwqvT4LJRLiXUH6bc3J03LwxXJoXaBwKc
	AuSECjFjwT8o3ZSQkz5LarlYvZgGr6ham6MnsU1ZATZZ6g6u6iLoXf47SzktcSbctS7FSn
	x+eIYT6OrXhGDP/d0O03YLCG+pcKsB2HaLZ67U6O265at7bbjpgQ2USqNmfE8Pb3EYJZ3P
	z7V6bVK7AQl3GeKLvWH6zNuWbg3fe2PLKGHmayjtrxTc6uV/2kxdzafLQfKFkNU8VF+ykN
	8SXHYnwfejx49o+BSCrLZrrs4IbvdMmTxuGfxTXFXwkNuMhhvSHtvxTjfUdMTkXFDtBg6V
	8Z09M5+RudhdD+epNWJ/FAwhKfKwRPCx7ccD8Vzbv/0Mf6Wy6Y4nqMcgyHXqhPH7q9GV7F
	SUNSk+9oCT+wqqiNpV5w/rRCo+Pv7wAAAAMBAAEAAAGACGqu5YskofpE4wMlFyca6AytjE
	2+MQg7Z5YoCKyN8V8I2jy/1gaGlykROaLekSwGkm8ioS7ADtujnuJipHiMKdG5pMmEkxQX
	raihzRZvVafg7OErgfewbGhKrl3Vu/goq8UaCEU9FxgdSW70Nr4X0qoMa5mJxHsxK1ADHs
	p9l82XbFzHIX+/TRTnLntR6GW1nLng8hw4gOh5RyKNCdFAa9xghu+lnCYV4moSbnP4sAwQ
	m3SPViXQxofkNmeB43agzTZrvqjAgRXe1DJsfLQiXtQkZfImYezJazHn386NFB/xohB9sp
	HuXB8KQcdaz9j8+/QXlwYt9WdZRnhj9GUH551WnfCMHnQwxU29WFX+mMeNmzMExZPfzy7I
	lBeH4710xrdKs162+rvaKjtfTvH4gtRK7VsiHC4P13pgI74uM4JnXXDtLlwmTTgbUmP6So
	20trc7Fc/uTva7O67+W2EVogd52qJ7+riqlN8nWOiAblcxWVWtGtQYPEwqw+7zSQZpAAAA
	wE1qg3qXIa7dKj1liDwSIfsNwzmSyop6KrSHxNw0OvVCSbWXlBjBENl3inELpzgHOV39nx
	NWRPBK1BA7pi20SMP2ucqVSFyK6knxM67IM1ILXnkx8HNoMZ2Si4pZQRTm3ladRfa8iWdm
	vxafUHHVj+C6ipjkBzcuk45LQugMkGUkK7Er9Zx271sitP1fkt8Rauu7sfCS4y5lL+9xKn
	MfreCSbYdUbtFGLoFdPikk4uSu6pLmPyHLlvKJkrGccAqdvQAAAMEAxYCGHXvfwcQ0yY5+
	vtMZb3pzl1jRJ3dGx4Gm+BQFAWiPARNWnp4Ol0pWPumaXAZU6s1JT7SmgHj4SqykUWxG4K
	Zyb5I5ZYiq8cuGLbhZxH5Uea17wMf/Pt06Clzy5p54w4Rhr1TuoA2Ycg3RzPHl6XWuZa2m
	FLez8ICnxZAKV6hko2cclvx9v10TME6Ao36aKwpt+96PAdU2+Ysf+6jjQao40RpcVsjbOg
	moId+jTEOuc7KhjepCyzNtq57FRuerAAAAwQD52ZjvM8LyQBRyyRmtLderolrfgUPaSLJs
	gM6NU1/jIIqpRghOFm/xg72PkgpLORlDtYDdYfvuSpxvrbsKrbGZ2WoU5khmB77oDHmmKQ
	uc8lsYm4IurFRv6Xkr0bfOJuIU3XQVMitD7QMdE38yjYHYI1NEnYrb6qp3zT3S2Sd4cnws
	FVYk3Dou9hCRPUglTtAqiIOmNyI0YlA2pMqpo+wHFuODJQX1eZF4dbaJFciS9DG31QY53w
	SrHqNdHT65RM0AAAATcm9vdEBtcngtVmlydHVhbEJveA==
	-----END OPENSSH PRIVATE KEY-----
	
	}
    }
    custom-config {
	custom-config-id service:SSH:/etc/ssh/sshd_config
	custom-command /etc/ssh/sshd_config
	config {
	# auto-generated by SSH service (utility.py)
	Port 22
	Protocol 2
	HostKey /etc/ssh/ssh_host_rsa_key
	UsePrivilegeSeparation yes
	PidFile /var/run/sshd/sshd.pid
	
	KeyRegenerationInterval 3600
	ServerKeyBits 768
	
	SyslogFacility AUTH
	LogLevel INFO
	
	LoginGraceTime 120
	PermitRootLogin yes
	StrictModes yes
	
	RSAAuthentication yes
	PubkeyAuthentication yes
	
	IgnoreRhosts yes
	RhostsRSAAuthentication no
	HostbasedAuthentication no
	
	PermitEmptyPasswords no
	ChallengeResponseAuthentication no
	
	X11Forwarding yes
	X11DisplayOffset 10
	PrintMotd no
	PrintLastLog yes
	TCPKeepAlive yes
	
	AcceptEnv LANG LC_*
	Subsystem sftp /usr/lib/openssh/sftp-server
	UsePAM yes
	UseDNS no
	
	}
    }
    custom-config {
	custom-config-id service:SSH:startsshd.sh
	custom-command startsshd.sh
	config {
	#!/bin/sh
	# auto-generated by SSH service (utility.py)
	# ssh-keygen -q -t rsa -N "" -f /etc/ssh/ssh_host_rsa_key
	chmod 655 /var/run/sshd
	# wait until RSA host key has been generated to launch sshd
	/usr/sbin/sshd -f /etc/ssh/sshd_config
	
	}
    }
    services {DefaultRoute SSH UserDefined}
}

node n13 {
    type router
    model cc_dec_node_ovs
    network-config {
	hostname decnode1
	!
	interface eth3
	!
	interface eth4
	!
	interface eth2
	!
	interface eth1
	!
    }
    canvas c1
    iconcoords {95.0 314.0}
    labelcoords {95.0 346.0}
    interface-peer {eth1 n3}
    interface-peer {eth2 n6}
    services {CC_DecisionNode_OVS}
    interface-peer {eth3 n8}
    interface-peer {eth4 n9}
    interface-peer {eth0 n2}
    custom-config {
	custom-config-id service:CC_DecisionNode_OVS
	custom-command CC_DecisionNode_OVS
	config {
	files=('MyMonitor.sh', 'MyTrigger.py', 'start_ovs.sh', )
	}
    }
    custom-config {
	custom-config-id service:CC_DecisionNode_OVS:MyTrigger.py
	custom-command MyTrigger.py
	config {
	# auto-generated by CC_DecisionNode_OVS service
	# Short python to implement Trigger.
	# The following three items are important:
	# 1. You must write the process_data(self) function
	# 2. Read the input (from the Monitor) directly from the suricata log file
	# 3. Call the self.active_conn method with the cc node number as a parameter.
	
	import time
	#Required import
	from Trigger.trigger import Trigger
	
	#Required class name that inherits Trigger
	class MyTrigger(Trigger):  
	    
	    #Required function
	    def process_data(self):
	        #forever loop to process data
	        numAlerts = 0
	        #get the cc_node numbers
	        nodes = self.get_cc_node_numbers()
	        self.set_active_conn("eth0", disable_others=True)
	        self.set_active_conn("eth1", disable_others=False)
	        timestamp_list = []
	        while True:
	####Modify to process Monitor's data and Trigger a switch####
	            # read a line of input (from Monitor's stdout)
	            # data = self.read_input_line()
	            with open('/tmp/suricata-out/fast.log', 'r') as f:
	                data = f.readlines()[-1]
	            print("READ: " + str(data))
	            #if data yet exists, restart loop
	            if data == None:
	                continue
	            if "1100001" in data and data[:26] not in timestamp_list:
	                timestamp_list.append(data[:26])
	                # if data exists, we know there was an alert; 
	                # let's switch if there are more than 10 alerts
	                numAlerts = numAlerts + 1
	                if numAlerts == 20:
	                    self.set_active_conn("eth0", disable_others=True)
	                    self.set_active_conn("eth4", disable_others=False)
	                    count = 1
	                    while True:
	                        time.sleep(1)
	                        count = count + 1
	                        if count == 30:
	                            #set active node
	                            self.set_active_conn("eth0", disable_others=True)
	                            self.set_active_conn("eth2", disable_others=False)
	                        if count == 60:
	                            self.set_active_conn("eth0", disable_others=True)
	                            self.set_active_conn("eth4", disable_others=False)
	                            count = 1
	
	}
    }
    custom-config {
	custom-config-id service:CC_DecisionNode_OVS:MyMonitor.sh
	custom-command MyMonitor.sh
	config {
	#!/bin/sh
	# auto-generated by CC_DecisionNode_OVS service
	# Call any/all scripts needed for the Monitor.
	# The stdout from this code will be given to MyTrigger.py for processing.
	# This is an example of using epoch time as the monitor data
	
	while [ True ]
	do
	sleep 1
	date +%s
	done
	
	}
    }
}

node n8 {
    type router
    model PC
    network-config {
	hostname n8
	!
	interface eth0
	 ip address 10.0.1.20/24
	!
    }
    canvas c1
    iconcoords {196.0 547.0}
    labelcoords {196.0 579.0}
    interface-peer {eth0 n13}
}

node n9 {
    type router
    model router
    network-config {
	hostname R4
	!
	interface eth2
	 ip address 10.0.2.1/24
	 mac address 00:bb:00:cc:00:33
	!
	interface eth0
	 ip address 10.0.1.1/24
	 mac address 00:11:22:33:bb:aa
	!
	interface eth1
	 ip address 10.0.0.1/24
	!
    }
    canvas c1
    iconcoords {340.0 454.0}
    labelcoords {340.0 486.0}
    services {zebra CC_Node IPForward StaticRoute}
    interface-peer {eth0 n13}
    interface-peer {eth1 n10}
    interface-peer {eth2 n4}
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 10.0.1.1
	#/sbin/ip route add 10.9.8.0/24 via 10.0.0.1
	#/sbin/ip route add 10.9.8.0/24 via 10.0.2.1
	/sbin/ip route add 10.0.5.0/24 via 10.0.2.4
	/sbin/ip route add 10.0.6.0/24 via 10.0.1.2
	}
    }
}

node n10 {
    type router
    model host
    network-config {
	hostname honeyserver1
	!
	interface eth0
	 ip address 10.0.0.10/24
	 mac address 08:00:27:E1:11:CF
	!
    }
    canvas c1
    iconcoords {570.0 453.0}
    labelcoords {570.0 485.0}
    interface-peer {eth0 n9}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/var/log/nginx', '/var/www/html', )
	files=('auto.sh', )
	cmdup=('nginx', 'bash auto.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:auto.sh
	custom-command auto.sh
	config {
	c=1
	
	while [ $c -le 5 ]
	do
	
		sleep 10
		rsync -av mrx@10.0.5.10:/home/mrx/practical_honeypot_CDES/crawler/scripts/http:/10.0.0.10/ /var/www/html/
		sudo chown -R www-data:www-data /var/www/html/
		chmod -R 755 /var/www/html/
	done
	}
    }
    custom-config {
	custom-config-id service:SSH
	custom-command SSH
	config {
	dirs=('/etc/ssh', '/var/run/sshd', '/home/researchdev/.ssh', )
	files=('startsshd.sh', '/etc/ssh/sshd_config', '~/.ssh/authorized_keys', 'ssh_host_rsa_key', '/etc/ssh/ssh_host_rsa_key.pub', '/etc/ssh/ssh_host_rsa_key', )
	}
    }
    custom-config {
	custom-config-id service:SSH:/etc/ssh/ssh_host_rsa_key
	custom-command /etc/ssh/ssh_host_rsa_key
	config {
	-----BEGIN OPENSSH PRIVATE KEY-----
	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
	-----END OPENSSH PRIVATE KEY-----
	}
    }
    custom-config {
	custom-config-id service:SSH:/etc/ssh/ssh_host_rsa_key.pub
	custom-command /etc/ssh/ssh_host_rsa_key.pub
	config {
	ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCnL6F72sfPzqidpBUlpONdE/R34AxC2UWx/rscl+bqBJSRDyr6m1Un/4JwaWPjsVTvsljpUItofcoUKGBRqb1c+jtCZNBnCj8ZmKK6pD+AomDcq41D6sniHFHoG4/n3//hxMcFR0Y2rni2hmmfw6qEYUVjhd91W38Wz9W4Xco4eutCuiBpGnMTWXvgxmAyYqW0eSM6lJIrMpRIatvjr3+DkMHLDo5DuqB4fgXnVVW9xa+vjPz3i3O22Rbz78LbI9fYWKQ7ItTqqEGt7PE/+6HqjvI6PbjZ48GYa0utJ9DMmnJQaQmSMo02TiNJmxMjyLLbKWTzrHH2HlR1EAeMrg39M+ZfgZLIgkho4yrPnQJ7Cl8wqSi88Q3JlFJJRjrWPQwES7zSo75m8gZ14XQy0piEeo8h6sGiVPUF2Fh0hLDMXkG/ESryCtVKNsRTiOj8fGylZb0sTdacFcj6EdHl4xbYLrA7qHmmP3WPRmqn6LmdMViI8tawV0d+QeA8Lmlhuh0= mrx@mrx-VirtualBox
	}
    }
    custom-config {
	custom-config-id service:SSH:ssh_host_rsa_key
	custom-command ssh_host_rsa_key
	config {
	-----BEGIN OPENSSH PRIVATE KEY-----
	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
	-----END OPENSSH PRIVATE KEY-----
	
	}
    }
    custom-config {
	custom-config-id service:SSH:~/.ssh/authorized_keys
	custom-command ~/.ssh/authorized_keys
	config {
	ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQD2028JMayhmpgdAXG9/mJ1nLiOJcWmQazUFCpEz6QN8jIQoitK5MiOu3Svr1ccZo6tK8x8n9Y1C8O39/3qIlFv+eahwUS2CpVb04eLC4jpExxJBt7NXFgrqQZ7bIX8NDJwobN8uMEx1/6rkpVb0QY/eF1chzskArZff/RnuXM62mfeGnXZuvzFD0jMV7byVm8A+KekCC/Qh9lg69PRTl437OoyF5CjApx62SxYi8O3lm47d1u0XVr6ETizEPfcIGVPTp4F3DPFitC+CH9S0qV0N+5eJsw/IH3dspy2ZfponqjPlBpjXNRDzYooKSkRaAm0fDVUC6EjkxgPEIT4/SOdnYyPdWTDPnVREQUhKgrj3WeOst/hoEymH/wEPGI/PNFSVEb/OJapLWxZ9YFgbCAZ426vvgtjrNU5SAroLBlK0h81e5jcxCM5DZNjEOiQOjq8yPoi1KogL25aEcHJgq9oG0y8i/Cl6zUs2xLbiRyWWn5yBoMtVj0EcihkYWQ3cwE= mrx@mrx-VirtualBox
	}
    }
    custom-config {
	custom-config-id service:SSH:/etc/ssh/sshd_config
	custom-command /etc/ssh/sshd_config
	config {
	# auto-generated by SSH service (utility.py)
	Port 22
	Protocol 2
	HostKey /etc/ssh/ssh_host_rsa_key
	UsePrivilegeSeparation yes
	PidFile /var/run/sshd/sshd.pid
	
	KeyRegenerationInterval 3600
	ServerKeyBits 768
	
	SyslogFacility AUTH
	LogLevel INFO
	
	LoginGraceTime 120
	PermitRootLogin yes
	StrictModes yes
	
	RSAAuthentication yes
	PubkeyAuthentication yes
	
	IgnoreRhosts yes
	RhostsRSAAuthentication no
	HostbasedAuthentication no
	
	PermitEmptyPasswords yes
	ChallengeResponseAuthentication no
	
	X11Forwarding yes
	X11DisplayOffset 10
	PrintMotd no
	PrintLastLog yes
	TCPKeepAlive yes
	
	AcceptEnv LANG LC_*
	Subsystem sftp /usr/lib/openssh/sftp-server
	UsePAM yes
	UseDNS no
	
	}
    }
    custom-config {
	custom-config-id service:SSH:startsshd.sh
	custom-command startsshd.sh
	config {
	#!/bin/sh
	# auto-generated by SSH service (utility.py)
	# ssh-keygen -q -t rsa -N "" -f /etc/ssh/ssh_host_rsa_key
	chmod 655 /var/run/sshd
	# wait until RSA host key has been generated to launch sshd
	/usr/sbin/sshd -f /etc/ssh/sshd_config
	
	}
    }
    services {DefaultRoute SSH UserDefined}
}

node n4 {
    type router
    model cc_dec_node_ovs
    network-config {
	hostname decnode2
	!
    }
    canvas c1
    iconcoords {289.0 323.0}
    labelcoords {289.0 355.0}
    interface-peer {eth1 n9}
    interface-peer {eth2 n3}
    interface-peer {eth3 n6}
    custom-config {
	custom-config-id service:CC_DecisionNode_OVS:MyMonitor.sh
	custom-command MyMonitor.sh
	config {
	#!/bin/sh
	# auto-generated by CC_DecisionNode_OVS service
	# Call any/all scripts needed for the Monitor.
	# The stdout from this code will be given to MyTrigger.py for processing.
	# This is an example of using epoch time as the monitor data
	
	while [ True ]
	do
	sleep 1
	date +%s
	done
	
	}
    }
    custom-config {
	custom-config-id service:CC_DecisionNode_OVS
	custom-command CC_DecisionNode_OVS
	config {
	files=('MyMonitor.sh', 'MyTrigger.py', 'start_ovs.sh', )
	}
    }
    custom-config {
	custom-config-id service:CC_DecisionNode_OVS:MyTrigger.py
	custom-command MyTrigger.py
	config {
	# auto-generated by CC_DecisionNode_OVS service
	# Short python to implement Trigger.
	# The following three items are important:
	# 1. You must write the process_data(self) function
	# 2. Read the input (from the Monitor) by calling self.read_input_line()
	# 3. Call the self.active_conn method with the cc node number as a parameter.
	# The following is a sample that reads time information from the Monitor and 
	# will swap between nodes every 15 seconds
	
	import time
	#Required import
	from Trigger.trigger import Trigger
	
	#Required class name that inherits Trigger
	class MyTrigger(Trigger):  
	    
	    #Required function
	    def process_data(self):
	        #get the cc_node numbers
	        nodes = self.get_cc_node_numbers()
	        self.set_active_conn("eth0", disable_others=True)
	        self.set_active_conn("eth2", disable_others=False)
	        #use a counter to trigger call to swap
	        count = 1
	        #forever loop to process data
	        while True:
	####Modify to process Monitor's data and Trigger a switch####
	            # read a line of input (from Monitor's stdout)
	            data = self.read_input_line()
	            print("READ: " + str(data))
	            #if data yet exists, restart loop
	            if data == None:
	                continue
	            # assuming we get one update per second
	            count = count + 1
	            new_time = int(data)
	            #set active node every 30 seconds
	            if count == 30:
	                self.set_active_conn("eth0", disable_others=True)
	                self.set_active_conn("eth1", disable_others=False)
	            if count == 60:
	                self.set_active_conn("eth0", disable_others=True)
	                self.set_active_conn("eth3", disable_others=False)
	            if count == 90:
	                self.set_active_conn("eth0", disable_others=True)
	                self.set_active_conn("eth2", disable_others=False)
	                count = 1
	####
	
	}
    }
    services {CC_DecisionNode_OVS}
    interface-peer {eth0 n5}
}

node n5 {
    type router
    model router
    network-config {
	hostname R3
	!
	interface eth1
	 ip address 10.0.5.1/24
	!
	interface eth0
	 ip address 10.0.2.4/24
	!
    }
    canvas c1
    iconcoords {461.0 324.0}
    labelcoords {461.0 356.0}
    interface-peer {eth0 n4}
    interface-peer {eth1 n11}
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 10.0.2.1
	#/sbin/ip route add 10.9.8.0/24 via 10.0.5.1
	/sbin/ip route add 10.0.0.0/24 via 10.0.2.1
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/home/researchdev', )
	files=('route.sh', )
	cmdup=('cp route.sh /home/researchdev', 'bash route.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:route.sh
	custom-command route.sh
	config {
	c=1
	while [ $c -le 5 ]
	do
	/sbin/ip route del 10.0.0.0/24 via 10.0.2.3 dev eth0
	/sbin/ip route add 10.0.0.0/24 via 10.0.2.2 dev eth0
	sudo ifdown eth0 and ifup eth0
	sleep 30
	/sbin/ip route del 10.0.0.0/24 via 10.0.2.2 dev eth0
	/sbin/ip route add 10.0.0.0/24 via 10.0.2.1 dev eth0
	sudo ifdown eth0 and ifup eth0
	sleep 30
	/sbin/ip route del 10.0.0.0/24 via 10.0.2.1 dev eth0
	/sbin/ip route add 10.0.0.0/24 via 10.0.2.3 dev eth0
	sudo ifdown eth0 and ifup eth0
	sleep 30
	done
	}
    }
    services {zebra DefaultRoute IPForward StaticRoute}
}

node n11 {
    type rj45
    network-config {
	hostname enp0s9
	!
    }
    canvas c1
    iconcoords {591.0 324.0}
    labelcoords {591.0 356.0}
    interface-peer {0 n5}
}

node n2 {
    type router
    model router
    network-config {
	hostname R2
	!
	interface eth1
	 ip address 10.0.6.1/24
	!
	interface eth0
	 ip address 10.0.1.2/24
	!
    }
    canvas c1
    iconcoords {94.0 458.0}
    labelcoords {94.0 490.0}
    interface-peer {eth0 n13}
    interface-peer {eth1 n12}
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 10.0.1.1
	#/sbin/ip route add 10.9.8.0/24 via 10.0.6.1
	/sbin/ip route add 10.0.0.0/24 via 10.0.1.1
	}
    }
    services {zebra IPForward StaticRoute}
}

node n12 {
    type rj45
    network-config {
	hostname enp0s8
	!
    }
    canvas c1
    iconcoords {89.0 559.0}
    labelcoords {89.0 591.0}
    interface-peer {0 n2}
}

node n1 {
    type rj45
    network-config {
	hostname enp0s3
	!
    }
    canvas c1
    iconcoords {525.0 186.0}
    labelcoords {525.0 218.0}
    interface-peer {0 n3}
}

link l6 {
    nodes {n6 n7}
    bandwidth 0
}

link l5 {
    color blue
    nodes {n13 n3}
}

link l7 {
    color yellow
    nodes {n13 n6}
}

link l8 {
    color yellow
    nodes {n8 n13}
}

link l10 {
    color yellow
    nodes {n13 n9}
}

link l9 {
    nodes {n9 n10}
    bandwidth 0
}

link l4 {
    color blue
    nodes {n4 n9}
}

link l11 {
    color yellow
    nodes {n4 n3}
}

link l12 {
    color yellow
    nodes {n4 n6}
}

link l3 {
    color blue
    nodes {n4 n5}
}

link l13 {
    nodes {n5 n11}
}

link l1 {
    color blue
    nodes {n13 n2}
}

link l14 {
    nodes {n12 n2}
}

link l2 {
    nodes {n3 n1}
}

annotation a1 {
    iconcoords {26.0 131.0 635.0 260.0}
    type rectangle
    label {Legitimate Network}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #C0C0FF
    width 0
    border black
    rad 25
    canvas c1
}

annotation a2 {
    iconcoords {255.0 377.0 623.0 492.0}
    type rectangle
    label {Honey Network 1}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #C0C0FF
    width 0
    border black
    rad 25
    canvas c1
}

annotation a3 {
    iconcoords {30.0 387.0 157.0 607.0}
    type rectangle
    label {Attacker Network}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #c0c04b
    width 0
    border black
    rad 25
    canvas c1
}

annotation a4 {
    iconcoords {28.0 262.0 182.0 371.0}
    type rectangle
    label {Decision Maker 01}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #19be56
    width 0
    border black
    rad 20
    canvas c1
}

annotation a5 {
    iconcoords {7.0 87.0}
    type text
    label {An untrusted node is conditionally connected to either the legitimate or honeynet.}
    labelcolor black
    fontfamily {Arial}
    fontsize {18}
    canvas c1
}

annotation a6 {
    type text
    iconcoords {266.0 98.0}
    label {}
    canvas c1
}

annotation a8 {
    iconcoords {69.0 108.0}
    type text
    label {Changes after 20 ICMP packets from 10.0.1.10.}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a17 {
    type text
    iconcoords {189.0 623.0}
    label {}
    canvas c1
}

annotation a9 {
    iconcoords {247 499 621 610}
    type rectangle
    label {Honey Network 2}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #C0C0FF
    width 0
    border black
    rad 25
    canvas c1
}

annotation a7 {
    iconcoords {62.0 361.0}
    type text
    label {eth0}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a10 {
    type text
    iconcoords {239.0 302.0}
    label {}
    canvas c1
}

annotation a11 {
    iconcoords {111.0 301.0}
    type text
    label {eth1}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a12 {
    iconcoords {144.0 375.0}
    type text
    label {eth2}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a13 {
    iconcoords {105.0 368.0}
    type text
    label {eth3}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a14 {
    iconcoords {139.0 345.0}
    type text
    label {eth4}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a16 {
    iconcoords {210 261 354 377}
    type rectangle
    label {Decision Maker 02}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #43fc3e
    width 0
    border black
    rad 25
    canvas c1
}

annotation a18 {
    iconcoords {316.0 308.0}
    type text
    label {eth0}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a19 {
    iconcoords {303.0 369.0}
    type text
    label {eth1}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a20 {
    type text
    iconcoords {328.0 425.0}
    label {}
    canvas c1
}

annotation a21 {
    iconcoords {254.0 300.0}
    type text
    label {eth2}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a22 {
    iconcoords {255.0 365.0}
    type text
    label {eth3}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a23 {
    type text
    iconcoords {403.0 303.0}
    label {}
    canvas c1
}

annotation a15 {
    iconcoords {388.0 264.0 632.0 373.0}
    type rectangle
    label {Crawler Network}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #C0C0FF
    width 0
    border black
    rad 25
    canvas c1
}

annotation a24 {
    iconcoords {453.0 161.0}
    type text
    label {Legit Server (Ubuntu)}
    labelcolor black
    fontfamily {Arial}
    fontsize {11}
    canvas c1
}

annotation a25 {
    iconcoords {31.0 538.0}
    type text
    label {Attacker(Kali Linux)}
    labelcolor black
    fontfamily {Arial}
    fontsize {11}
    canvas c1
}

annotation a26 {
    iconcoords {520.0 301.0}
    type text
    label {Crawler (Ubuntu)}
    labelcolor black
    fontfamily {Arial}
    fontsize {11}
    canvas c1
}

annotation a27 {
    iconcoords {481.0 230.0}
    type text
    label {10.0.0.10/24}
    labelcolor black
    fontfamily {Arial}
    fontsize {11}
    canvas c1
}

annotation a28 {
    iconcoords {56.0 597.0}
    type text
    label {10.0.6.10/24}
    labelcolor black
    fontfamily {Arial}
    fontsize {11}
    canvas c1
}

annotation a29 {
    iconcoords {559.0 363.0}
    type text
    label {10.0.5.10}
    labelcolor black
    fontfamily {Arial}
    fontsize {11}
    canvas c1
}

annotation a30 {
    iconcoords {162.0 584.0}
    type text
    label {Other Users}
    labelcolor black
    fontfamily {Arial}
    fontsize {11}
    canvas c1
}

annotation a31 {
    type text
    iconcoords {263.0 286.0}
    label {}
    canvas c1
}

canvas c1 {
    name {Canvas1}
}

hook 4:suricatastart_runtime_hook.sh {
#!/bin/sh
# session hook script; write commands here to execute on the host at the
# specified state

echo "" > /tmp/suricata-out/fast.log

if [ -f /etc/suricata/suricata-debian.yaml ]
then
  SURICATA_YAML=/etc/suricata/suricata-debian.yaml
else
  SURICATA_YAML=/etc/suricata/suricata.yaml
fi

INTERFACES=`find /sys/class/net/ -mindepth 1 -maxdepth 1 -name 'vethd.*' -printf '-i %f '`

echo suricata -c $SURICATA_YAML -l /tmp/suricata-out/ -S /tmp/suricata-out/rules/custom.rules $INTERFACES --pidfile /tmp/suricata.pid -D > /tmp/suricommand.txt

suricata -c $SURICATA_YAML -l /tmp/suricata-out/ -S /tmp/suricata-out/rules/custom.rules $INTERFACES --pidfile /tmp/suricata.pid -D
}

hook 3:suricatarule_instantiation_hook.sh {
#!/bin/sh
# session hook script; write commands here to execute on the host at the
# specified state

mkdir /tmp/suricata-out/
mkdir /tmp/suricata-out/rules

cat << EOF > /tmp/suricata-out/rules/custom.rules

alert ssh 10.0.6.10 any -> any any (msg:"ICMP packet from X3"; sid:1100003; rev:1;)
alert icmp 10.0.1.20 any -> any any (msg:"ICMP packet from X2"; sid:1100002; rev:1;)
alert icmp 10.0.6.10 any -> any any (msg:"ICMP packet from X1"; sid:1100001; rev:1;)
EOF
}

hook 6:suricatastop_shutdown_hook.sh {
#!/bin/sh
# session hook script; write commands here to execute on the host at the
# specified state

kill `cat /tmp/suricata.pid`
}

hook 4:startcdes_runtime_hook.sh {
#!/bin/sh
###CHANGE THE FOLLOWING LINE TO THE DIRECTORY WITH YOUR CODE##
CODE_PATH=/home/researchdev/cdes/


######DO NOT MODIFY (UNLESS YOU KNOW WHAT YOU"RE DOING)#######
python3 $CODE_PATH/cdes_loader.py &
}

option global {
    interface_names no
    ip_addresses yes
    ipv6_addresses yes
    node_labels yes
    link_labels yes
    show_api yes
    background_images no
    annotations yes
    grid yes
    traffic_start 0
}

option session {
}

